"""empty message

Revision ID: 1916fbf3b1eb
Revises: b89fbc8cf4c1
Create Date: 2024-07-02 22:39:10.940780

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import redash
import sqlalchemy_utils

# revision identifiers, used by Alembic.
revision = '1916fbf3b1eb'
down_revision = 'b89fbc8cf4c1'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('organizations',
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('slug', sa.String(length=255), nullable=False),
    sa.Column('settings', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('slug')
    )
    op.create_table('data_sources',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('org_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('type', sa.String(length=255), nullable=False),
    sa.Column('encrypted_options', redash.models.types.EncryptedConfiguration(), nullable=False),
    sa.Column('queue_name', sa.String(length=255), nullable=False),
    sa.Column('scheduled_queue_name', sa.String(length=255), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['org_id'], ['organizations.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('data_sources_org_id_name', 'data_sources', ['org_id', 'name'], unique=False)
    op.create_table('groups',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('org_id', sa.Integer(), nullable=False),
    sa.Column('type', sa.String(length=255), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('permissions', postgresql.ARRAY(sa.String(length=255)), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['org_id'], ['organizations.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('users',
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('org_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=320), nullable=False),
    sa.Column('email', sqlalchemy_utils.types.email.EmailType(length=255), nullable=False),
    sa.Column('password_hash', sa.String(length=128), nullable=True),
    sa.Column('groups', postgresql.ARRAY(sa.Integer()), nullable=True),
    sa.Column('api_key', sa.String(length=40), nullable=False),
    sa.Column('disabled_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('details', postgresql.JSONB(astext_type=sa.Text()), server_default='{}', nullable=True),
    sa.ForeignKeyConstraint(['org_id'], ['organizations.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('api_key')
    )
    op.create_index('users_org_id_email', 'users', ['org_id', 'email'], unique=True)
    op.create_table('access_permissions',
    sa.Column('object_type', sa.String(length=255), nullable=False),
    sa.Column('object_id', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('access_type', sa.String(length=255), nullable=False),
    sa.Column('grantor_id', sa.Integer(), nullable=False),
    sa.Column('grantee_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['grantee_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['grantor_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('api_keys',
    sa.Column('object_type', sa.String(length=255), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('org_id', sa.Integer(), nullable=False),
    sa.Column('api_key', sa.String(length=255), nullable=False),
    sa.Column('active', sa.Boolean(), nullable=False),
    sa.Column('object_id', sa.Integer(), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['org_id'], ['organizations.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('api_keys_object_type_object_id', 'api_keys', ['object_type', 'object_id'], unique=False)
    op.create_index(op.f('ix_api_keys_api_key'), 'api_keys', ['api_key'], unique=False)
    op.create_table('changes',
    sa.Column('object_type', sa.String(length=255), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('object_id', sa.Integer(), nullable=False),
    sa.Column('object_version', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('change', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('dashboards',
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('org_id', sa.Integer(), nullable=False),
    sa.Column('slug', sa.String(length=140), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('layout', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('dashboard_filters_enabled', sa.Boolean(), nullable=False),
    sa.Column('is_archived', sa.Boolean(), nullable=False),
    sa.Column('is_draft', sa.Boolean(), nullable=False),
    sa.Column('tags', postgresql.ARRAY(sa.Unicode()), nullable=True),
    sa.Column('options', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.ForeignKeyConstraint(['org_id'], ['organizations.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_dashboards_is_archived'), 'dashboards', ['is_archived'], unique=False)
    op.create_index(op.f('ix_dashboards_is_draft'), 'dashboards', ['is_draft'], unique=False)
    op.create_index(op.f('ix_dashboards_slug'), 'dashboards', ['slug'], unique=False)
    op.create_table('data_source_groups',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('data_source_id', sa.Integer(), nullable=False),
    sa.Column('group_id', sa.Integer(), nullable=False),
    sa.Column('view_only', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['data_source_id'], ['data_sources.id'], ),
    sa.ForeignKeyConstraint(['group_id'], ['groups.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('events',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('org_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('action', sa.String(length=255), nullable=False),
    sa.Column('object_type', sa.String(length=255), nullable=False),
    sa.Column('object_id', sa.String(length=255), nullable=True),
    sa.Column('additional_properties', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['org_id'], ['organizations.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('favorites',
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('org_id', sa.Integer(), nullable=False),
    sa.Column('object_type', sa.Unicode(length=255), nullable=False),
    sa.Column('object_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['org_id'], ['organizations.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('object_type', 'object_id', 'user_id', name='unique_favorite')
    )
    op.create_table('models',
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('data_source_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('table', sa.String(length=255), nullable=True),
    sa.ForeignKeyConstraint(['data_source_id'], ['data_sources.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('notification_destinations',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('org_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('type', sa.String(length=255), nullable=False),
    sa.Column('encrypted_options', redash.models.types.EncryptedConfiguration(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['org_id'], ['organizations.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('notification_destinations_org_id_name', 'notification_destinations', ['org_id', 'name'], unique=True)
    op.create_table('query_results',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('org_id', sa.Integer(), nullable=False),
    sa.Column('data_source_id', sa.Integer(), nullable=False),
    sa.Column('query_hash', sa.String(length=32), nullable=False),
    sa.Column('query', sa.Text(), nullable=False),
    sa.Column('data', redash.models.types.JSONText(), nullable=True),
    sa.Column('runtime', postgresql.DOUBLE_PRECISION(), nullable=False),
    sa.Column('retrieved_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['data_source_id'], ['data_sources.id'], ),
    sa.ForeignKeyConstraint(['org_id'], ['organizations.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_query_results_query_hash'), 'query_results', ['query_hash'], unique=False)
    op.create_table('query_snippets',
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('org_id', sa.Integer(), nullable=False),
    sa.Column('trigger', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('snippet', sa.Text(), nullable=False),
    sa.ForeignKeyConstraint(['org_id'], ['organizations.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('trigger')
    )
    op.create_table('model_configs',
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('content', sa.String(length=20000), nullable=False),
    sa.Column('model_id', sa.Integer(), nullable=False),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['model_id'], ['models.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('queries',
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('org_id', sa.Integer(), nullable=False),
    sa.Column('data_source_id', sa.Integer(), nullable=True),
    sa.Column('latest_query_data_id', sa.Integer(), nullable=True),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.String(length=4096), nullable=True),
    sa.Column('query', sa.Text(), nullable=False),
    sa.Column('query_hash', sa.String(length=32), nullable=False),
    sa.Column('api_key', sa.String(length=40), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('last_modified_by_id', sa.Integer(), nullable=True),
    sa.Column('is_archived', sa.Boolean(), nullable=False),
    sa.Column('is_draft', sa.Boolean(), nullable=False),
    sa.Column('schedule', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('schedule_failures', sa.Integer(), nullable=False),
    sa.Column('options', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('search_vector', sqlalchemy_utils.types.ts_vector.TSVectorType(), nullable=True),
    sa.Column('tags', postgresql.ARRAY(sa.Unicode()), nullable=True),
    sa.ForeignKeyConstraint(['data_source_id'], ['data_sources.id'], ),
    sa.ForeignKeyConstraint(['last_modified_by_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['latest_query_data_id'], ['query_results.id'], ),
    sa.ForeignKeyConstraint(['org_id'], ['organizations.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_queries_is_archived'), 'queries', ['is_archived'], unique=False)
    op.create_index(op.f('ix_queries_is_draft'), 'queries', ['is_draft'], unique=False)
    op.create_index('ix_queries_search_vector', 'queries', ['search_vector'], unique=False, postgresql_using='gin')
    op.create_table('reports',
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('expression', sa.JSON(), nullable=True),
    sa.Column('model_id', sa.Integer(), nullable=False),
    sa.Column('color_1', sa.String(length=32), nullable=False),
    sa.Column('color_2', sa.String(length=32), nullable=False),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('is_archived', sa.Boolean(), nullable=False),
    sa.Column('tags', postgresql.ARRAY(sa.Unicode()), nullable=True),
    sa.Column('api_key', sa.String(length=40), nullable=True),
    sa.ForeignKeyConstraint(['model_id'], ['models.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_reports_is_archived'), 'reports', ['is_archived'], unique=False)
    op.create_table('alerts',
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('query_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('options', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('state', sa.String(length=255), nullable=False),
    sa.Column('last_triggered_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('rearm', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['query_id'], ['queries.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('visualizations',
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('type', sa.String(length=100), nullable=False),
    sa.Column('query_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.String(length=4096), nullable=True),
    sa.Column('options', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.ForeignKeyConstraint(['query_id'], ['queries.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('alert_subscriptions',
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('destination_id', sa.Integer(), nullable=True),
    sa.Column('alert_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['alert_id'], ['alerts.id'], ),
    sa.ForeignKeyConstraint(['destination_id'], ['notification_destinations.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('alert_subscriptions_destination_id_alert_id', 'alert_subscriptions', ['destination_id', 'alert_id'], unique=True)
    op.create_table('widgets',
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('visualization_id', sa.Integer(), nullable=True),
    sa.Column('text', sa.Text(), nullable=True),
    sa.Column('width', sa.Integer(), nullable=False),
    sa.Column('options', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('dashboard_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['dashboard_id'], ['dashboards.id'], ),
    sa.ForeignKeyConstraint(['visualization_id'], ['visualizations.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_widgets_dashboard_id'), 'widgets', ['dashboard_id'], unique=False)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_widgets_dashboard_id'), table_name='widgets')
    op.drop_table('widgets')
    op.drop_index('alert_subscriptions_destination_id_alert_id', table_name='alert_subscriptions')
    op.drop_table('alert_subscriptions')
    op.drop_table('visualizations')
    op.drop_table('alerts')
    op.drop_index(op.f('ix_reports_is_archived'), table_name='reports')
    op.drop_table('reports')
    op.drop_index('ix_queries_search_vector', table_name='queries', postgresql_using='gin')
    op.drop_index(op.f('ix_queries_is_draft'), table_name='queries')
    op.drop_index(op.f('ix_queries_is_archived'), table_name='queries')
    op.drop_table('queries')
    op.drop_table('model_configs')
    op.drop_table('query_snippets')
    op.drop_index(op.f('ix_query_results_query_hash'), table_name='query_results')
    op.drop_table('query_results')
    op.drop_index('notification_destinations_org_id_name', table_name='notification_destinations')
    op.drop_table('notification_destinations')
    op.drop_table('models')
    op.drop_table('favorites')
    op.drop_table('events')
    op.drop_table('data_source_groups')
    op.drop_index(op.f('ix_dashboards_slug'), table_name='dashboards')
    op.drop_index(op.f('ix_dashboards_is_draft'), table_name='dashboards')
    op.drop_index(op.f('ix_dashboards_is_archived'), table_name='dashboards')
    op.drop_table('dashboards')
    op.drop_table('changes')
    op.drop_index(op.f('ix_api_keys_api_key'), table_name='api_keys')
    op.drop_index('api_keys_object_type_object_id', table_name='api_keys')
    op.drop_table('api_keys')
    op.drop_table('access_permissions')
    op.drop_index('users_org_id_email', table_name='users')
    op.drop_table('users')
    op.drop_table('groups')
    op.drop_index('data_sources_org_id_name', table_name='data_sources')
    op.drop_table('data_sources')
    op.drop_table('organizations')
    # ### end Alembic commands ###
